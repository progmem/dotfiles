#!/usr/bin/env bash
# Inspired by @mathiasbynens's prompt setup
# 	https://github.com/mathiasbynens/dotfiles
# Inspired-by-proxy by @necolas's prompt
# 	https://github.com/necolas/dotfiles

### COLORS
# Test for tput; if available, we'll use it.
# Running tput directly lets us check against the termcap.
if tput setaf 1 &>/dev/null; then
	# Reset - Default colors and stylings
	  reset=$(tput sgr0)
	# Styles - Bold, Underline, Reverse Video
	   bold=$(tput bold)
	  uline=$(tput smul)
	    rev=$(tput rev)
	# Colors
	  black=$(tput setaf 0)
	    red=$(tput setaf 1)
	  green=$(tput setaf 2)
	 yellow=$(tput setaf 3)
	   blue=$(tput setaf 4)
	magenta=$(tput setaf 5)
	   cyan=$(tput setaf 6)
	  white=$(tput setaf 7)
# Otherwise, fallback to traditional ANSI escape codes.
else
	  reset="\e[0m";
	  black="\e[1;30m";
	    red="\e[1;31m";
	  green="\e[1;32m";
	 yellow="\e[1;33m";
	   blue="\e[1;34m";
	magenta="\e[1;35m";
	   cyan="\e[1;36m";
	  white="\e[1;37m";
fi

### GIT PROMPT
# Accepts a before-string and an after-string, to allow selective padding of the prompt.
__git_ps1__() {
	local indicators='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null

			# Check for uncommitted changes in the index.
			! $(git diff --quiet --ignore-submodules --cached)   && indicators+='+'

			# Check for unstaged changes.
			! $(git diff-files --quiet --ignore-submodules --)   && indicators+='!'

			# Check for untracked files.
			[ -n "$(git ls-files --others --exclude-standard)" ] && indicators+='?'

			# Check for stashed files.
			$(git rev-parse --verify refs/stash &>/dev/null)     && indicators+='$'
		fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$( \
			git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse            --short HEAD 2> /dev/null || \
			echo 'unknown')"

		# TODO: This is a bit of a kludge; we assume that if this prompt offers padding, that color will be allowed.
		# We should accept a switch instead to determine whether we output with color.
		if [ -n "${indicators}" ]; then
			indicators="${indicators}"
			[ ! -z "${1}" ] && echo -e "${bold}${red}\c"
		else
			[ ! -z "${1}" ] && echo -e "${magenta}\c"
		fi

		local prompt_text="($branchName$indicators)"
		echo -e "$1$prompt_text$2"
	else
		return
	fi
}


### LAST COMMAND STATUS
# Prints a red color for non-zero exits, green otherwise.
# Returns the exit code to allow for it to carry over.
__command_color_ps1__() {
  local exit=$1
  [[ $1 == 0 ]] && echo -e "${green}" || echo -e "${red}"
  return $1
}


### PROMPT BUILDING
# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}"
else
	userStyle="${yellow}"
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}"
else
	hostStyle="${green}"
fi


### PS1
# Set the terminal title and prompt.
PS1="\[\$(__command_color_ps1__ \$?)\][\$?] " # Command prompt and color, goes first!
PS1+="\[${userStyle}\]\u"         # user
PS1+="\[${reset}\]@"              # @
PS1+="\[${hostStyle}\]\h"         # hostname
PS1+="\[${reset}\]:"              # :
PS1+="\[${cyan}\]\w"              # ~/.../working/dir
PS1+="\$(__git_ps1__ \" \" )"     # (master!?)
PS1+="\[${reset}\]\n"             #
PS1+="\$ "                        # $

PS1+="\[\033]0;"                   # Begin Terminal Title
PS1+="\$(__git_ps1__ \"\" \" \")" # Git status
PS1+="\W"                         # Current directory (basename)
PS1+="\007\]"                     # End Terminal Title
export PS1

### PS2
PS2="\[${yellow}\]→ \[${reset}\]"
export PS2
