#!/usr/bin/env bash
export ENVSUBST="$(which envsubst)"
if [ -z "${ENVSUBST}" ] && brew --prefix gettext &>/dev/null; then
	export ENVSUBST="$(brew --prefix gettext)/bin/envsubst"
fi

[ -z "${ENVSUBST}" ] && exit 1

# Force a .config directory if XDG_CONFIG_HOME isn't set.
[ -z "${XDG_CONFIG_HOME}" ] && export XDG_CONFIG_HOME="${HOME}/.config"

# Checks for a .symlink in the current directory.
# If present, digests the file format.
digest_dot_symlink() {
  # If there is no .symlink in our directory, return an error.
  [ -s ".symlink" ] || return 1
  echo "Found .symlink file at $PWD, digesting..."  

  # We'll initialize tgtdir to a blank variable.
  # We will not link files unless we have a directory that is valid.
  tgtdir=""

  # Now we'll start digesting the contents of our .symlink file.
  while read line; do
    # If a comment looks like an absolute path, we'll treat it as somewhere to symlink to.
    if [[ "$line" == \#\ \/* ]]; then
      tgtdir="${line#\# }"
      # We'll check if this path already exists.
      # If it doesn't, we'll attempt to make it.
      [ ! -d "$tgtdir" ] && echo "mkdir -p $tgtdir &>/dev/null"
      # Once an attempt was made, we'll test again.
      # If it's not a directory, then we'll blank out our tgtdir.
      [ ! -d "$tgtdir" ] && tgtdir=""

      [ -d "$tgtdir" ] && echo "Symlinking the following to $tgtdir:"
    # If a comment looks like a comment, we'll treat it like a comment!
    elif [[ "$line" == \#* ]]; then
      echo "$line"
    # If a tgtdir is set, then we can start symlinking.
    elif [ ! -z "$tgtdir" ]; then
      # We'll check if our symlink target exists.
      if   [[ -f "$line" ]]; then
        echo "f) $line"
      elif [[ -d "$line" ]]; then
        echo "d) $line"
      else
        continue
      fi
      
      # We have a small problem here, in that -F means something completely different between OSX and Linux.
      # So, we'll try twice: once with -fns, which in a Linux environment should remove the destination file, and again with -F to make OSX happy.
      ln -fns "$(realpath $line)" "${tgtdir}/${line}" || ln -FFns "$(realpath $line)" "${tgtdir}/${line}"
    fi
  # Note the extra echo at the end; this is to catch any files that don't have a newline at the end.
  done < <(cat .symlink | ${ENVSUBST} && echo)
}

export -f digest_dot_symlink

# If you're running this script, most likely you're wanting to run it for this git repository. So, how can we guarantee that?
# Shoutouts to https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within for this and the top answer, by the way.
# Start by resolving BASH_SOURCE[0] until it's no longer a symlink.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # If SOURCE is a relative symlink, resolve it relative to the path where the link was found.
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# Now we can simply go to that directory.
cd "$DIR"

# Now that we're here, we should be in a git repository. If we are, we'll jump to the top-level folder.
# Otherwise, we'll go up a folder, assuming this is in the .system directory.
cd $(git rev-parse --show-toplevel) || cd ..
# Finally, we'll find and process any .symlink files.
find . -iname ".symlink" -execdir bash -c digest_dot_symlink \;
